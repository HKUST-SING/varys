/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package varys;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class VarysMasterService {

  public interface Iface {

    public void putOne(String hostname, MachineStat machineStat) throws org.apache.thrift.TException;

    public Map<String,MachineStat> getAll() throws org.apache.thrift.TException;

    public List<String> getMachines(int numMachines, long avgTxBytes) throws org.apache.thrift.TException;

    public void writeBlock(long blockSize, EndPoint listenFrom) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void putOne(String hostname, MachineStat machineStat, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.putOne_call> resultHandler) throws org.apache.thrift.TException;

    public void getAll(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAll_call> resultHandler) throws org.apache.thrift.TException;

    public void getMachines(int numMachines, long avgTxBytes, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMachines_call> resultHandler) throws org.apache.thrift.TException;

    public void writeBlock(long blockSize, EndPoint listenFrom, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.writeBlock_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void putOne(String hostname, MachineStat machineStat) throws org.apache.thrift.TException
    {
      send_putOne(hostname, machineStat);
      recv_putOne();
    }

    public void send_putOne(String hostname, MachineStat machineStat) throws org.apache.thrift.TException
    {
      putOne_args args = new putOne_args();
      args.setHostname(hostname);
      args.setMachineStat(machineStat);
      sendBase("putOne", args);
    }

    public void recv_putOne() throws org.apache.thrift.TException
    {
      putOne_result result = new putOne_result();
      receiveBase(result, "putOne");
      return;
    }

    public Map<String,MachineStat> getAll() throws org.apache.thrift.TException
    {
      send_getAll();
      return recv_getAll();
    }

    public void send_getAll() throws org.apache.thrift.TException
    {
      getAll_args args = new getAll_args();
      sendBase("getAll", args);
    }

    public Map<String,MachineStat> recv_getAll() throws org.apache.thrift.TException
    {
      getAll_result result = new getAll_result();
      receiveBase(result, "getAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAll failed: unknown result");
    }

    public List<String> getMachines(int numMachines, long avgTxBytes) throws org.apache.thrift.TException
    {
      send_getMachines(numMachines, avgTxBytes);
      return recv_getMachines();
    }

    public void send_getMachines(int numMachines, long avgTxBytes) throws org.apache.thrift.TException
    {
      getMachines_args args = new getMachines_args();
      args.setNumMachines(numMachines);
      args.setAvgTxBytes(avgTxBytes);
      sendBase("getMachines", args);
    }

    public List<String> recv_getMachines() throws org.apache.thrift.TException
    {
      getMachines_result result = new getMachines_result();
      receiveBase(result, "getMachines");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMachines failed: unknown result");
    }

    public void writeBlock(long blockSize, EndPoint listenFrom) throws org.apache.thrift.TException
    {
      send_writeBlock(blockSize, listenFrom);
      recv_writeBlock();
    }

    public void send_writeBlock(long blockSize, EndPoint listenFrom) throws org.apache.thrift.TException
    {
      writeBlock_args args = new writeBlock_args();
      args.setBlockSize(blockSize);
      args.setListenFrom(listenFrom);
      sendBase("writeBlock", args);
    }

    public void recv_writeBlock() throws org.apache.thrift.TException
    {
      writeBlock_result result = new writeBlock_result();
      receiveBase(result, "writeBlock");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void putOne(String hostname, MachineStat machineStat, org.apache.thrift.async.AsyncMethodCallback<putOne_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putOne_call method_call = new putOne_call(hostname, machineStat, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putOne_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String hostname;
      private MachineStat machineStat;
      public putOne_call(String hostname, MachineStat machineStat, org.apache.thrift.async.AsyncMethodCallback<putOne_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostname = hostname;
        this.machineStat = machineStat;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putOne", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putOne_args args = new putOne_args();
        args.setHostname(hostname);
        args.setMachineStat(machineStat);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_putOne();
      }
    }

    public void getAll(org.apache.thrift.async.AsyncMethodCallback<getAll_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAll_call method_call = new getAll_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAll_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAll_call(org.apache.thrift.async.AsyncMethodCallback<getAll_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAll_args args = new getAll_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,MachineStat> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAll();
      }
    }

    public void getMachines(int numMachines, long avgTxBytes, org.apache.thrift.async.AsyncMethodCallback<getMachines_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMachines_call method_call = new getMachines_call(numMachines, avgTxBytes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMachines_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int numMachines;
      private long avgTxBytes;
      public getMachines_call(int numMachines, long avgTxBytes, org.apache.thrift.async.AsyncMethodCallback<getMachines_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.numMachines = numMachines;
        this.avgTxBytes = avgTxBytes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMachines", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMachines_args args = new getMachines_args();
        args.setNumMachines(numMachines);
        args.setAvgTxBytes(avgTxBytes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMachines();
      }
    }

    public void writeBlock(long blockSize, EndPoint listenFrom, org.apache.thrift.async.AsyncMethodCallback<writeBlock_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeBlock_call method_call = new writeBlock_call(blockSize, listenFrom, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeBlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long blockSize;
      private EndPoint listenFrom;
      public writeBlock_call(long blockSize, EndPoint listenFrom, org.apache.thrift.async.AsyncMethodCallback<writeBlock_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blockSize = blockSize;
        this.listenFrom = listenFrom;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeBlock_args args = new writeBlock_args();
        args.setBlockSize(blockSize);
        args.setListenFrom(listenFrom);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_writeBlock();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("putOne", new putOne());
      processMap.put("getAll", new getAll());
      processMap.put("getMachines", new getMachines());
      processMap.put("writeBlock", new writeBlock());
      return processMap;
    }

    private static class putOne<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putOne_args> {
      public putOne() {
        super("putOne");
      }

      protected putOne_args getEmptyArgsInstance() {
        return new putOne_args();
      }

      protected putOne_result getResult(I iface, putOne_args args) throws org.apache.thrift.TException {
        putOne_result result = new putOne_result();
        iface.putOne(args.hostname, args.machineStat);
        return result;
      }
    }

    private static class getAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAll_args> {
      public getAll() {
        super("getAll");
      }

      protected getAll_args getEmptyArgsInstance() {
        return new getAll_args();
      }

      protected getAll_result getResult(I iface, getAll_args args) throws org.apache.thrift.TException {
        getAll_result result = new getAll_result();
        result.success = iface.getAll();
        return result;
      }
    }

    private static class getMachines<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMachines_args> {
      public getMachines() {
        super("getMachines");
      }

      protected getMachines_args getEmptyArgsInstance() {
        return new getMachines_args();
      }

      protected getMachines_result getResult(I iface, getMachines_args args) throws org.apache.thrift.TException {
        getMachines_result result = new getMachines_result();
        result.success = iface.getMachines(args.numMachines, args.avgTxBytes);
        return result;
      }
    }

    private static class writeBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeBlock_args> {
      public writeBlock() {
        super("writeBlock");
      }

      protected writeBlock_args getEmptyArgsInstance() {
        return new writeBlock_args();
      }

      protected writeBlock_result getResult(I iface, writeBlock_args args) throws org.apache.thrift.TException {
        writeBlock_result result = new writeBlock_result();
        iface.writeBlock(args.blockSize, args.listenFrom);
        return result;
      }
    }

  }

  public static class putOne_args implements org.apache.thrift.TBase<putOne_args, putOne_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putOne_args");

    private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MACHINE_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("machineStat", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putOne_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putOne_argsTupleSchemeFactory());
    }

    public String hostname; // required
    public MachineStat machineStat; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOSTNAME((short)1, "hostname"),
      MACHINE_STAT((short)2, "machineStat");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOSTNAME
            return HOSTNAME;
          case 2: // MACHINE_STAT
            return MACHINE_STAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MACHINE_STAT, new org.apache.thrift.meta_data.FieldMetaData("machineStat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MachineStat.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putOne_args.class, metaDataMap);
    }

    public putOne_args() {
    }

    public putOne_args(
      String hostname,
      MachineStat machineStat)
    {
      this();
      this.hostname = hostname;
      this.machineStat = machineStat;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putOne_args(putOne_args other) {
      if (other.isSetHostname()) {
        this.hostname = other.hostname;
      }
      if (other.isSetMachineStat()) {
        this.machineStat = new MachineStat(other.machineStat);
      }
    }

    public putOne_args deepCopy() {
      return new putOne_args(this);
    }

    @Override
    public void clear() {
      this.hostname = null;
      this.machineStat = null;
    }

    public String getHostname() {
      return this.hostname;
    }

    public putOne_args setHostname(String hostname) {
      this.hostname = hostname;
      return this;
    }

    public void unsetHostname() {
      this.hostname = null;
    }

    /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
    public boolean isSetHostname() {
      return this.hostname != null;
    }

    public void setHostnameIsSet(boolean value) {
      if (!value) {
        this.hostname = null;
      }
    }

    public MachineStat getMachineStat() {
      return this.machineStat;
    }

    public putOne_args setMachineStat(MachineStat machineStat) {
      this.machineStat = machineStat;
      return this;
    }

    public void unsetMachineStat() {
      this.machineStat = null;
    }

    /** Returns true if field machineStat is set (has been assigned a value) and false otherwise */
    public boolean isSetMachineStat() {
      return this.machineStat != null;
    }

    public void setMachineStatIsSet(boolean value) {
      if (!value) {
        this.machineStat = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOSTNAME:
        if (value == null) {
          unsetHostname();
        } else {
          setHostname((String)value);
        }
        break;

      case MACHINE_STAT:
        if (value == null) {
          unsetMachineStat();
        } else {
          setMachineStat((MachineStat)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOSTNAME:
        return getHostname();

      case MACHINE_STAT:
        return getMachineStat();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOSTNAME:
        return isSetHostname();
      case MACHINE_STAT:
        return isSetMachineStat();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putOne_args)
        return this.equals((putOne_args)that);
      return false;
    }

    public boolean equals(putOne_args that) {
      if (that == null)
        return false;

      boolean this_present_hostname = true && this.isSetHostname();
      boolean that_present_hostname = true && that.isSetHostname();
      if (this_present_hostname || that_present_hostname) {
        if (!(this_present_hostname && that_present_hostname))
          return false;
        if (!this.hostname.equals(that.hostname))
          return false;
      }

      boolean this_present_machineStat = true && this.isSetMachineStat();
      boolean that_present_machineStat = true && that.isSetMachineStat();
      if (this_present_machineStat || that_present_machineStat) {
        if (!(this_present_machineStat && that_present_machineStat))
          return false;
        if (!this.machineStat.equals(that.machineStat))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(putOne_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      putOne_args typedOther = (putOne_args)other;

      lastComparison = Boolean.valueOf(isSetHostname()).compareTo(typedOther.isSetHostname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, typedOther.hostname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMachineStat()).compareTo(typedOther.isSetMachineStat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMachineStat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineStat, typedOther.machineStat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putOne_args(");
      boolean first = true;

      sb.append("hostname:");
      if (this.hostname == null) {
        sb.append("null");
      } else {
        sb.append(this.hostname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("machineStat:");
      if (this.machineStat == null) {
        sb.append("null");
      } else {
        sb.append(this.machineStat);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putOne_argsStandardSchemeFactory implements SchemeFactory {
      public putOne_argsStandardScheme getScheme() {
        return new putOne_argsStandardScheme();
      }
    }

    private static class putOne_argsStandardScheme extends StandardScheme<putOne_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putOne_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOSTNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostname = iprot.readString();
                struct.setHostnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MACHINE_STAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.machineStat = new MachineStat();
                struct.machineStat.read(iprot);
                struct.setMachineStatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putOne_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostname != null) {
          oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
          oprot.writeString(struct.hostname);
          oprot.writeFieldEnd();
        }
        if (struct.machineStat != null) {
          oprot.writeFieldBegin(MACHINE_STAT_FIELD_DESC);
          struct.machineStat.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putOne_argsTupleSchemeFactory implements SchemeFactory {
      public putOne_argsTupleScheme getScheme() {
        return new putOne_argsTupleScheme();
      }
    }

    private static class putOne_argsTupleScheme extends TupleScheme<putOne_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putOne_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHostname()) {
          optionals.set(0);
        }
        if (struct.isSetMachineStat()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHostname()) {
          oprot.writeString(struct.hostname);
        }
        if (struct.isSetMachineStat()) {
          struct.machineStat.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putOne_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.hostname = iprot.readString();
          struct.setHostnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.machineStat = new MachineStat();
          struct.machineStat.read(iprot);
          struct.setMachineStatIsSet(true);
        }
      }
    }

  }

  public static class putOne_result implements org.apache.thrift.TBase<putOne_result, putOne_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putOne_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putOne_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putOne_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putOne_result.class, metaDataMap);
    }

    public putOne_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putOne_result(putOne_result other) {
    }

    public putOne_result deepCopy() {
      return new putOne_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putOne_result)
        return this.equals((putOne_result)that);
      return false;
    }

    public boolean equals(putOne_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(putOne_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      putOne_result typedOther = (putOne_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putOne_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putOne_resultStandardSchemeFactory implements SchemeFactory {
      public putOne_resultStandardScheme getScheme() {
        return new putOne_resultStandardScheme();
      }
    }

    private static class putOne_resultStandardScheme extends StandardScheme<putOne_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putOne_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putOne_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putOne_resultTupleSchemeFactory implements SchemeFactory {
      public putOne_resultTupleScheme getScheme() {
        return new putOne_resultTupleScheme();
      }
    }

    private static class putOne_resultTupleScheme extends TupleScheme<putOne_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putOne_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putOne_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAll_args implements org.apache.thrift.TBase<getAll_args, getAll_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAll_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAll_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAll_args.class, metaDataMap);
    }

    public getAll_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAll_args(getAll_args other) {
    }

    public getAll_args deepCopy() {
      return new getAll_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAll_args)
        return this.equals((getAll_args)that);
      return false;
    }

    public boolean equals(getAll_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAll_args typedOther = (getAll_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAll_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAll_argsStandardSchemeFactory implements SchemeFactory {
      public getAll_argsStandardScheme getScheme() {
        return new getAll_argsStandardScheme();
      }
    }

    private static class getAll_argsStandardScheme extends StandardScheme<getAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAll_argsTupleSchemeFactory implements SchemeFactory {
      public getAll_argsTupleScheme getScheme() {
        return new getAll_argsTupleScheme();
      }
    }

    private static class getAll_argsTupleScheme extends TupleScheme<getAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAll_result implements org.apache.thrift.TBase<getAll_result, getAll_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAll_resultTupleSchemeFactory());
    }

    public Map<String,MachineStat> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MachineStat.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAll_result.class, metaDataMap);
    }

    public getAll_result() {
    }

    public getAll_result(
      Map<String,MachineStat> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAll_result(getAll_result other) {
      if (other.isSetSuccess()) {
        Map<String,MachineStat> __this__success = new HashMap<String,MachineStat>();
        for (Map.Entry<String, MachineStat> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          MachineStat other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          MachineStat __this__success_copy_value = new MachineStat(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getAll_result deepCopy() {
      return new getAll_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, MachineStat val) {
      if (this.success == null) {
        this.success = new HashMap<String,MachineStat>();
      }
      this.success.put(key, val);
    }

    public Map<String,MachineStat> getSuccess() {
      return this.success;
    }

    public getAll_result setSuccess(Map<String,MachineStat> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,MachineStat>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAll_result)
        return this.equals((getAll_result)that);
      return false;
    }

    public boolean equals(getAll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAll_result typedOther = (getAll_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAll_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAll_resultStandardSchemeFactory implements SchemeFactory {
      public getAll_resultStandardScheme getScheme() {
        return new getAll_resultStandardScheme();
      }
    }

    private static class getAll_resultStandardScheme extends StandardScheme<getAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.success = new HashMap<String,MachineStat>(2*_map0.size);
                  for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                  {
                    String _key2; // required
                    MachineStat _val3; // required
                    _key2 = iprot.readString();
                    _val3 = new MachineStat();
                    _val3.read(iprot);
                    struct.success.put(_key2, _val3);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, MachineStat> _iter4 : struct.success.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              _iter4.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAll_resultTupleSchemeFactory implements SchemeFactory {
      public getAll_resultTupleScheme getScheme() {
        return new getAll_resultTupleScheme();
      }
    }

    private static class getAll_resultTupleScheme extends TupleScheme<getAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, MachineStat> _iter5 : struct.success.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              _iter5.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,MachineStat>(2*_map6.size);
            for (int _i7 = 0; _i7 < _map6.size; ++_i7)
            {
              String _key8; // required
              MachineStat _val9; // required
              _key8 = iprot.readString();
              _val9 = new MachineStat();
              _val9.read(iprot);
              struct.success.put(_key8, _val9);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMachines_args implements org.apache.thrift.TBase<getMachines_args, getMachines_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMachines_args");

    private static final org.apache.thrift.protocol.TField NUM_MACHINES_FIELD_DESC = new org.apache.thrift.protocol.TField("numMachines", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField AVG_TX_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("avgTxBytes", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMachines_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMachines_argsTupleSchemeFactory());
    }

    public int numMachines; // required
    public long avgTxBytes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUM_MACHINES((short)1, "numMachines"),
      AVG_TX_BYTES((short)2, "avgTxBytes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUM_MACHINES
            return NUM_MACHINES;
          case 2: // AVG_TX_BYTES
            return AVG_TX_BYTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMMACHINES_ISSET_ID = 0;
    private static final int __AVGTXBYTES_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUM_MACHINES, new org.apache.thrift.meta_data.FieldMetaData("numMachines", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AVG_TX_BYTES, new org.apache.thrift.meta_data.FieldMetaData("avgTxBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMachines_args.class, metaDataMap);
    }

    public getMachines_args() {
    }

    public getMachines_args(
      int numMachines,
      long avgTxBytes)
    {
      this();
      this.numMachines = numMachines;
      setNumMachinesIsSet(true);
      this.avgTxBytes = avgTxBytes;
      setAvgTxBytesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMachines_args(getMachines_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.numMachines = other.numMachines;
      this.avgTxBytes = other.avgTxBytes;
    }

    public getMachines_args deepCopy() {
      return new getMachines_args(this);
    }

    @Override
    public void clear() {
      setNumMachinesIsSet(false);
      this.numMachines = 0;
      setAvgTxBytesIsSet(false);
      this.avgTxBytes = 0;
    }

    public int getNumMachines() {
      return this.numMachines;
    }

    public getMachines_args setNumMachines(int numMachines) {
      this.numMachines = numMachines;
      setNumMachinesIsSet(true);
      return this;
    }

    public void unsetNumMachines() {
      __isset_bit_vector.clear(__NUMMACHINES_ISSET_ID);
    }

    /** Returns true if field numMachines is set (has been assigned a value) and false otherwise */
    public boolean isSetNumMachines() {
      return __isset_bit_vector.get(__NUMMACHINES_ISSET_ID);
    }

    public void setNumMachinesIsSet(boolean value) {
      __isset_bit_vector.set(__NUMMACHINES_ISSET_ID, value);
    }

    public long getAvgTxBytes() {
      return this.avgTxBytes;
    }

    public getMachines_args setAvgTxBytes(long avgTxBytes) {
      this.avgTxBytes = avgTxBytes;
      setAvgTxBytesIsSet(true);
      return this;
    }

    public void unsetAvgTxBytes() {
      __isset_bit_vector.clear(__AVGTXBYTES_ISSET_ID);
    }

    /** Returns true if field avgTxBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetAvgTxBytes() {
      return __isset_bit_vector.get(__AVGTXBYTES_ISSET_ID);
    }

    public void setAvgTxBytesIsSet(boolean value) {
      __isset_bit_vector.set(__AVGTXBYTES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUM_MACHINES:
        if (value == null) {
          unsetNumMachines();
        } else {
          setNumMachines((Integer)value);
        }
        break;

      case AVG_TX_BYTES:
        if (value == null) {
          unsetAvgTxBytes();
        } else {
          setAvgTxBytes((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUM_MACHINES:
        return Integer.valueOf(getNumMachines());

      case AVG_TX_BYTES:
        return Long.valueOf(getAvgTxBytes());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUM_MACHINES:
        return isSetNumMachines();
      case AVG_TX_BYTES:
        return isSetAvgTxBytes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMachines_args)
        return this.equals((getMachines_args)that);
      return false;
    }

    public boolean equals(getMachines_args that) {
      if (that == null)
        return false;

      boolean this_present_numMachines = true;
      boolean that_present_numMachines = true;
      if (this_present_numMachines || that_present_numMachines) {
        if (!(this_present_numMachines && that_present_numMachines))
          return false;
        if (this.numMachines != that.numMachines)
          return false;
      }

      boolean this_present_avgTxBytes = true;
      boolean that_present_avgTxBytes = true;
      if (this_present_avgTxBytes || that_present_avgTxBytes) {
        if (!(this_present_avgTxBytes && that_present_avgTxBytes))
          return false;
        if (this.avgTxBytes != that.avgTxBytes)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMachines_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMachines_args typedOther = (getMachines_args)other;

      lastComparison = Boolean.valueOf(isSetNumMachines()).compareTo(typedOther.isSetNumMachines());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumMachines()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numMachines, typedOther.numMachines);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAvgTxBytes()).compareTo(typedOther.isSetAvgTxBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvgTxBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgTxBytes, typedOther.avgTxBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMachines_args(");
      boolean first = true;

      sb.append("numMachines:");
      sb.append(this.numMachines);
      first = false;
      if (!first) sb.append(", ");
      sb.append("avgTxBytes:");
      sb.append(this.avgTxBytes);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMachines_argsStandardSchemeFactory implements SchemeFactory {
      public getMachines_argsStandardScheme getScheme() {
        return new getMachines_argsStandardScheme();
      }
    }

    private static class getMachines_argsStandardScheme extends StandardScheme<getMachines_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMachines_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUM_MACHINES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numMachines = iprot.readI32();
                struct.setNumMachinesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AVG_TX_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.avgTxBytes = iprot.readI64();
                struct.setAvgTxBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMachines_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUM_MACHINES_FIELD_DESC);
        oprot.writeI32(struct.numMachines);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AVG_TX_BYTES_FIELD_DESC);
        oprot.writeI64(struct.avgTxBytes);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMachines_argsTupleSchemeFactory implements SchemeFactory {
      public getMachines_argsTupleScheme getScheme() {
        return new getMachines_argsTupleScheme();
      }
    }

    private static class getMachines_argsTupleScheme extends TupleScheme<getMachines_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMachines_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNumMachines()) {
          optionals.set(0);
        }
        if (struct.isSetAvgTxBytes()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNumMachines()) {
          oprot.writeI32(struct.numMachines);
        }
        if (struct.isSetAvgTxBytes()) {
          oprot.writeI64(struct.avgTxBytes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMachines_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.numMachines = iprot.readI32();
          struct.setNumMachinesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.avgTxBytes = iprot.readI64();
          struct.setAvgTxBytesIsSet(true);
        }
      }
    }

  }

  public static class getMachines_result implements org.apache.thrift.TBase<getMachines_result, getMachines_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMachines_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMachines_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMachines_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMachines_result.class, metaDataMap);
    }

    public getMachines_result() {
    }

    public getMachines_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMachines_result(getMachines_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public getMachines_result deepCopy() {
      return new getMachines_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getMachines_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMachines_result)
        return this.equals((getMachines_result)that);
      return false;
    }

    public boolean equals(getMachines_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMachines_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMachines_result typedOther = (getMachines_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMachines_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMachines_resultStandardSchemeFactory implements SchemeFactory {
      public getMachines_resultStandardScheme getScheme() {
        return new getMachines_resultStandardScheme();
      }
    }

    private static class getMachines_resultStandardScheme extends StandardScheme<getMachines_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMachines_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list10.size);
                  for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                  {
                    String _elem12; // optional
                    _elem12 = iprot.readString();
                    struct.success.add(_elem12);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMachines_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter13 : struct.success)
            {
              oprot.writeString(_iter13);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMachines_resultTupleSchemeFactory implements SchemeFactory {
      public getMachines_resultTupleScheme getScheme() {
        return new getMachines_resultTupleScheme();
      }
    }

    private static class getMachines_resultTupleScheme extends TupleScheme<getMachines_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMachines_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter14 : struct.success)
            {
              oprot.writeString(_iter14);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMachines_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list15.size);
            for (int _i16 = 0; _i16 < _list15.size; ++_i16)
            {
              String _elem17; // optional
              _elem17 = iprot.readString();
              struct.success.add(_elem17);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class writeBlock_args implements org.apache.thrift.TBase<writeBlock_args, writeBlock_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeBlock_args");

    private static final org.apache.thrift.protocol.TField BLOCK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("blockSize", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField LISTEN_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("listenFrom", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writeBlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writeBlock_argsTupleSchemeFactory());
    }

    public long blockSize; // required
    public EndPoint listenFrom; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLOCK_SIZE((short)1, "blockSize"),
      LISTEN_FROM((short)2, "listenFrom");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLOCK_SIZE
            return BLOCK_SIZE;
          case 2: // LISTEN_FROM
            return LISTEN_FROM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BLOCKSIZE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLOCK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("blockSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LISTEN_FROM, new org.apache.thrift.meta_data.FieldMetaData("listenFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EndPoint.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeBlock_args.class, metaDataMap);
    }

    public writeBlock_args() {
    }

    public writeBlock_args(
      long blockSize,
      EndPoint listenFrom)
    {
      this();
      this.blockSize = blockSize;
      setBlockSizeIsSet(true);
      this.listenFrom = listenFrom;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeBlock_args(writeBlock_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.blockSize = other.blockSize;
      if (other.isSetListenFrom()) {
        this.listenFrom = new EndPoint(other.listenFrom);
      }
    }

    public writeBlock_args deepCopy() {
      return new writeBlock_args(this);
    }

    @Override
    public void clear() {
      setBlockSizeIsSet(false);
      this.blockSize = 0;
      this.listenFrom = null;
    }

    public long getBlockSize() {
      return this.blockSize;
    }

    public writeBlock_args setBlockSize(long blockSize) {
      this.blockSize = blockSize;
      setBlockSizeIsSet(true);
      return this;
    }

    public void unsetBlockSize() {
      __isset_bit_vector.clear(__BLOCKSIZE_ISSET_ID);
    }

    /** Returns true if field blockSize is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockSize() {
      return __isset_bit_vector.get(__BLOCKSIZE_ISSET_ID);
    }

    public void setBlockSizeIsSet(boolean value) {
      __isset_bit_vector.set(__BLOCKSIZE_ISSET_ID, value);
    }

    public EndPoint getListenFrom() {
      return this.listenFrom;
    }

    public writeBlock_args setListenFrom(EndPoint listenFrom) {
      this.listenFrom = listenFrom;
      return this;
    }

    public void unsetListenFrom() {
      this.listenFrom = null;
    }

    /** Returns true if field listenFrom is set (has been assigned a value) and false otherwise */
    public boolean isSetListenFrom() {
      return this.listenFrom != null;
    }

    public void setListenFromIsSet(boolean value) {
      if (!value) {
        this.listenFrom = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BLOCK_SIZE:
        if (value == null) {
          unsetBlockSize();
        } else {
          setBlockSize((Long)value);
        }
        break;

      case LISTEN_FROM:
        if (value == null) {
          unsetListenFrom();
        } else {
          setListenFrom((EndPoint)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BLOCK_SIZE:
        return Long.valueOf(getBlockSize());

      case LISTEN_FROM:
        return getListenFrom();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BLOCK_SIZE:
        return isSetBlockSize();
      case LISTEN_FROM:
        return isSetListenFrom();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeBlock_args)
        return this.equals((writeBlock_args)that);
      return false;
    }

    public boolean equals(writeBlock_args that) {
      if (that == null)
        return false;

      boolean this_present_blockSize = true;
      boolean that_present_blockSize = true;
      if (this_present_blockSize || that_present_blockSize) {
        if (!(this_present_blockSize && that_present_blockSize))
          return false;
        if (this.blockSize != that.blockSize)
          return false;
      }

      boolean this_present_listenFrom = true && this.isSetListenFrom();
      boolean that_present_listenFrom = true && that.isSetListenFrom();
      if (this_present_listenFrom || that_present_listenFrom) {
        if (!(this_present_listenFrom && that_present_listenFrom))
          return false;
        if (!this.listenFrom.equals(that.listenFrom))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(writeBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      writeBlock_args typedOther = (writeBlock_args)other;

      lastComparison = Boolean.valueOf(isSetBlockSize()).compareTo(typedOther.isSetBlockSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockSize, typedOther.blockSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetListenFrom()).compareTo(typedOther.isSetListenFrom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListenFrom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listenFrom, typedOther.listenFrom);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeBlock_args(");
      boolean first = true;

      sb.append("blockSize:");
      sb.append(this.blockSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("listenFrom:");
      if (this.listenFrom == null) {
        sb.append("null");
      } else {
        sb.append(this.listenFrom);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeBlock_argsStandardSchemeFactory implements SchemeFactory {
      public writeBlock_argsStandardScheme getScheme() {
        return new writeBlock_argsStandardScheme();
      }
    }

    private static class writeBlock_argsStandardScheme extends StandardScheme<writeBlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLOCK_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.blockSize = iprot.readI64();
                struct.setBlockSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LISTEN_FROM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.listenFrom = new EndPoint();
                struct.listenFrom.read(iprot);
                struct.setListenFromIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BLOCK_SIZE_FIELD_DESC);
        oprot.writeI64(struct.blockSize);
        oprot.writeFieldEnd();
        if (struct.listenFrom != null) {
          oprot.writeFieldBegin(LISTEN_FROM_FIELD_DESC);
          struct.listenFrom.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeBlock_argsTupleSchemeFactory implements SchemeFactory {
      public writeBlock_argsTupleScheme getScheme() {
        return new writeBlock_argsTupleScheme();
      }
    }

    private static class writeBlock_argsTupleScheme extends TupleScheme<writeBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlockSize()) {
          optionals.set(0);
        }
        if (struct.isSetListenFrom()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBlockSize()) {
          oprot.writeI64(struct.blockSize);
        }
        if (struct.isSetListenFrom()) {
          struct.listenFrom.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.blockSize = iprot.readI64();
          struct.setBlockSizeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.listenFrom = new EndPoint();
          struct.listenFrom.read(iprot);
          struct.setListenFromIsSet(true);
        }
      }
    }

  }

  public static class writeBlock_result implements org.apache.thrift.TBase<writeBlock_result, writeBlock_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeBlock_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writeBlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writeBlock_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeBlock_result.class, metaDataMap);
    }

    public writeBlock_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeBlock_result(writeBlock_result other) {
    }

    public writeBlock_result deepCopy() {
      return new writeBlock_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeBlock_result)
        return this.equals((writeBlock_result)that);
      return false;
    }

    public boolean equals(writeBlock_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(writeBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      writeBlock_result typedOther = (writeBlock_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeBlock_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeBlock_resultStandardSchemeFactory implements SchemeFactory {
      public writeBlock_resultStandardScheme getScheme() {
        return new writeBlock_resultStandardScheme();
      }
    }

    private static class writeBlock_resultStandardScheme extends StandardScheme<writeBlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeBlock_resultTupleSchemeFactory implements SchemeFactory {
      public writeBlock_resultTupleScheme getScheme() {
        return new writeBlock_resultTupleScheme();
      }
    }

    private static class writeBlock_resultTupleScheme extends TupleScheme<writeBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
